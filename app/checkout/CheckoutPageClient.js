"use client";

import { useState } from "react";
import { FaTrash } from "react-icons/fa";
import { addOrderAction, removeFromCartAction } from "../_lib/actions";
import { useRouter } from "next/navigation";

export default function CheckoutPageClient({
  initialCartItems = [],
  sessionId,
}) {
  const [cartItems, setCartItems] = useState(initialCartItems);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    address: "",
    comment: "",
    payment: "card",
  });
  const [selectedPayment, setSelectedPayment] = useState("card");
  const router = useRouter();

  const total = cartItems.reduce(
    (s, it) =>
      s + (it.quantity ?? it.qty ?? 1) * (it.products?.price ?? it.price ?? 0),
    0
  );

  async function handleSubmit(e) {
    e.preventDefault();
    // if (cartItems.length === 0) {
    //   alert("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π");
    //   return;
    // }

    try {
      const res = await addOrderAction({
        userId: null,
        sessionId,
        cartItems,
        name: formData.name,
        phone: formData.phone,
        address: formData.address,
        comment: formData.comment,
        payment: selectedPayment,
        total, // –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ –∞–±–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏
      });

      // —É—Å–ø—ñ—Ö ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ UI —ñ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

      router.push(`/orders/${res.orderId}`);
    } catch (err) {
      console.error("Order error:", err);
      alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
    }
  }

  const paymentMethods = [
    {
      name: "card",
      label: "–ö—Ä–µ–¥–∏—Ç–Ω–∞ –∫–∞—Ä—Ç–∫–∞",
      description:
        "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é Visa/MasterCard —á–µ—Ä–µ–∑ –∑–∞—Ö–∏—â–µ–Ω—É –ø–ª–∞—Ç—ñ–∂–Ω—É —Å–∏—Å—Ç–µ–º—É.",
    },
    {
      name: "bank",
      label: "–ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π –ø–µ—Ä–µ–∫–∞–∑",
      description:
        "–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –Ω–∞—à —Ä–∞—Ö—É–Ω–æ–∫. –î–µ—Ç–∞–ª—ñ –±—É–¥—É—Ç—å –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
    },
    {
      name: "cash",
      label: "–ì–æ—Ç—ñ–≤–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
      description:
        "–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é –∫—É—Ä&apos;—î—Ä—É –∞–±–æ —É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ –ø–æ—à—Ç–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",
    },
  ];

  return (
    <>
      {cartItems.length === 0 ? (
        <div className="flex items-center justify-center flex-col p-8">
          <h2 className="text-gray-500 text-4xl">–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí</h2>
          <p className="text-gray-500 text-2xl">
            –î–æ–±–∞–≤—Ç–µ —Ç–æ–≤–∞—Ä —â–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
          </p>
        </div>
      ) : (
        <div className="grid grid-cols-1 lg:grid-cols-[2fr_2fr] gap-8 p-8  min-h-screen">
          {/* –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ ‚Äî —Ñ–æ—Ä–º–∞ */}
          <div>
            <h2 className="text-2xl font-bold mb-6">–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>
            <form className="space-y-6" onSubmit={handleSubmit}>
              <div>
                <label className="block mb-2 font-semibold">
                  –Ü–º&apos;—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ
                </label>
                <input
                  type="text"
                  className="w-full p-3 border border-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º&#39;—è"
                  value={formData.name}
                  onChange={(e) =>
                    setFormData({ ...formData, name: e.target.value })
                  }
                  required
                />
              </div>

              <div>
                <label className="block mb-2 font-semibold">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input
                  type="tel"
                  className="w-full p-3 border border-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="+380..."
                  value={formData.phone}
                  onChange={(e) =>
                    setFormData({ ...formData, phone: e.target.value })
                  }
                  required
                />
              </div>

              <div>
                <label className="block mb-2 font-semibold">
                  –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                </label>
                <input
                  className="w-full p-3 border border-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="–ú—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –±—É–¥–∏–Ω–æ–∫, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
                  value={formData.address}
                  onChange={(e) =>
                    setFormData({ ...formData, address: e.target.value })
                  }
                  required
                />
              </div>
              <div>
                <label className="block mb-2 font-semibold">
                  –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                </label>
                <textarea
                  type="text"
                  className="w-full p-3 border border-gray-400 rounded-lg focus:outline-none focus:ring-2 focus:ring-black"
                  placeholder="–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è..."
                  value={formData.comment}
                  onChange={(e) =>
                    setFormData({ ...formData, comment: e.target.value })
                  }
                />
              </div>

              {paymentMethods.map((option, index) => (
                <div key={option.name} className="border-b last:border-b-0">
                  <label className="flex items-center gap-3 p-4 cursor-pointer">
                    <input
                      type="radio"
                      name="payment"
                      value={option.name}
                      checked={selectedPayment === option.name}
                      onChange={() => setSelectedPayment(option.name)}
                      className="w-5 h-5 accent-blue-500"
                    />
                    <span className="font-semibold">{option.label}</span>
                  </label>

                  <div
                    className={`px-4 overflow-hidden transition-all duration-300 ease-in-out ${
                      selectedPayment === option.name
                        ? "max-h-40 py-2"
                        : "max-h-0"
                    }`}
                  >
                    <p className="text-gray-600 text-sm">
                      {option.description}
                    </p>
                  </div>
                </div>
              ))}

              <button
                type="submit"
                className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700"
              >
                –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
              </button>
            </form>
          </div>

          {/* –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ ‚Äî –∫–æ—à–∏–∫ */}
          <div className="bg-gray-100 p-6 rounded-lg h-fit sticky top-8">
            <h3 className="text-xl font-bold mb-4">–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h3>
            <ul className="space-y-4">
              {cartItems.map((it) => {
                const id = it.products?.id ?? it.id;
                const image = it.products?.image ?? it.image;
                const title = it.products?.title ?? it.name;
                const price = it.products?.price ?? it.price;
                const qty = it.quantity ?? it.qty ?? 1;
                return (
                  <li
                    key={id}
                    className="flex justify-between border-b pb-2 text-gray-700"
                  >
                    <div className="flex w-full justify-between pr-[30px]">
                      <div className="flex items-center">
                        <img src={image} className="w-20" />
                        <span className="ml-2.5">
                          {title} x {qty}
                        </span>
                      </div>
                      <span>{price * qty} –≥—Ä–Ω</span>
                    </div>
                    {/* <button
                      className="text-red-400 cursor-pointer"
                      onClick={() => removeProduct(id)}
                    >
                      <FaTrash />
                    </button> */}
                  </li>
                );
              })}
            </ul>
            <div className="flex justify-between mt-4 text-lg font-semibold">
              <span>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</span>
              <span>{total} –≥—Ä–Ω</span>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
